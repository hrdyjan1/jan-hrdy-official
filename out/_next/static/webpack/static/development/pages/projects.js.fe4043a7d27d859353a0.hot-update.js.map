{"version":3,"file":"static/webpack/static\\development\\pages\\projects.js.fe4043a7d27d859353a0.hot-update.js","sources":["webpack:///./components/pages/projects/Default.js"],"sourcesContent":["import React from 'react';\r\nimport { searchTypes } from '../../../pages/projects';\r\nimport Intro from './Intro';\r\nimport List from './List';\r\nimport SearchType from './SearchType';\r\nimport { useComplexLanguageMethod } from '../../../contexts/languageContext';\r\nimport { entities } from '../../../config/projects';\r\n\r\nconst MAX_INPUT_SUGGESTIONS = 5;\r\n\r\nconst getUniquePropertyValuesFromHashMap = ({ property, hashMap, ids }) => {\r\n  return ids\r\n    .map((id) => hashMap[id][property])\r\n    .filter((value, index, self) => self.indexOf(value) === index);\r\n};\r\n\r\nconst createSuggestionElements = ({ innerHTML, onclick = () => {} }) => {\r\n  const li = document.createElement('li');\r\n  li.style.transition = 'opacity .5s linear';\r\n  li.getBoundingClientRect();\r\n  li.style.opacity = 1;\r\n  li.innerHTML = innerHTML;\r\n  li.onclick = onclick;\r\n  return li;\r\n};\r\n\r\nconst Default = ({ getSuggestions, subject$ }) => {\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n  const [searchTypeValue, setSearchTypeValue] = React.useState(searchTypes.title);\r\n  const [isFocused, setFocused] = React.useState(false);\r\n  const ulRef = React.useRef(null);\r\n  const inputRef = React.useRef(null);\r\n  const { t } = useComplexLanguageMethod();\r\n\r\n  const changeSearchValue = (value) => {\r\n    setSearchValue(value);\r\n    subject$.next(value);\r\n  };\r\n\r\n  const changeInputValue = React.useCallback(({ target: { value } }) => changeSearchValue(value), [\r\n    changeSearchValue,\r\n    setSearchValue,\r\n  ]);\r\n\r\n  // Clear visible suggesting results\r\n  const hideResults = (shouldClear) => {\r\n    ulRef.current.classList.add('hidden');\r\n    if (shouldClear) {\r\n      ulRef.current.innerHTML = '';\r\n    }\r\n  };\r\n\r\n  // Focused on input\r\n  const setFocusOn = () => {\r\n    if (!isFocused) {\r\n      setFocused(true);\r\n    }\r\n  };\r\n\r\n  // Focused off input\r\n  const setFocusOff = () => {\r\n    if (isFocused) {\r\n      setFocused(false);\r\n    }\r\n  };\r\n\r\n  const handleShowingSuggestions = () => {\r\n    hideResults(true);\r\n    const searchValueLower = searchValue.toLowerCase();\r\n\r\n    if (suggestions.length === 0) {\r\n      const innerHTML = `Whoah! <strong>${searchValueLower}</strong> is not in the index`;\r\n      ulRef.current.appendChild(createSuggestionElements({ innerHTML }));\r\n    } else if (suggestions.length > 0) {\r\n      const obj = { property: searchTypeValue, hashMap: entities, ids: suggestions };\r\n      const uniqueSuggestionNames = getUniquePropertyValuesFromHashMap(obj);\r\n\r\n      for (let i = 0; i < uniqueSuggestionNames.length && i < MAX_INPUT_SUGGESTIONS; i++) {\r\n        const nameOfSuggestion = uniqueSuggestionNames[i];\r\n        const nameOfSuggestionLowerCase = nameOfSuggestion.toLowerCase();\r\n        const replacedValue = `<strong>${searchValueLower}</strong>`;\r\n        const innerHTML = nameOfSuggestionLowerCase.replace(searchValueLower, replacedValue);\r\n        const onclick = () => changeSearchValue(nameOfSuggestionLowerCase);\r\n\r\n        ulRef.current.appendChild(createSuggestionElements({ onclick, innerHTML }));\r\n      }\r\n    }\r\n\r\n    if (ulRef.current.className !== 'term-list') {\r\n      ulRef.current.className = 'term-list';\r\n    }\r\n  };\r\n\r\n  const handleClearingSuggestions = (event) => {\r\n    const isClickedOnSuggestionBar =\r\n      event.target.tagName === 'UL' ||\r\n      event.target.tagName === 'LI' ||\r\n      event.target.tagName === 'INPUT';\r\n    if (!isClickedOnSuggestionBar) {\r\n      setFocusOff();\r\n    }\r\n  };\r\n\r\n  // Handled suggestions\r\n  React.useEffect(() => {\r\n    if (isFocused) {\r\n      handleShowingSuggestions();\r\n    } else {\r\n      hideResults();\r\n    }\r\n  }, [isFocused, suggestions]);\r\n\r\n  // Handled focus on input\r\n  React.useEffect(() => {\r\n    const body = document.getElementsByTagName('body')[0];\r\n\r\n    body.addEventListener('click', handleClearingSuggestions);\r\n    inputRef.current.addEventListener('focusin', setFocusOn);\r\n    inputRef.current.addEventListener('keyup', setFocusOn);\r\n    return () => {\r\n      body.removeEventListener('click', handleClearingSuggestions);\r\n      inputRef.current.removeEventListener('focusin', setFocusOn);\r\n      inputRef.current.removeEventListener('keyup', setFocusOn);\r\n    };\r\n  }, [handleClearingSuggestions, setFocusOn]);\r\n\r\n  // Handled new suggestions from \"API\"\r\n  React.useEffect(() => {\r\n    const subscription = getSuggestions(subject$, searchTypeValue).subscribe(\r\n      (newSuggestions) => {\r\n        setSuggestions(newSuggestions);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [searchTypeValue, getSuggestions, subject$]);\r\n\r\n  return (\r\n    <div id='project-container'>\r\n      <Intro header='projects' subHeader='projectsDescription' />\r\n      <div className='wrapper-search'>\r\n        <SearchType searchTypeValue={searchTypeValue} changeSearchTypeValue={setSearchTypeValue} />\r\n        <input\r\n          // autoFocus\r\n          type='text'\r\n          id='searchBox'\r\n          ref={inputRef}\r\n          autoComplete='off'\r\n          className='search-field'\r\n          value={searchValue}\r\n          onChange={changeInputValue}\r\n          placeholder={`${t('search')}...`}\r\n        />\r\n      </div>\r\n      <ul ref={ulRef} id='searchResults' className='term-list hidden'></ul>\r\n      <List projects={suggestions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Default;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAPA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAXA;AACA;AAGA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}